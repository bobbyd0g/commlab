global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

## @section Common parameters

kubeVersion: ""
nameOverride: ""
fullnameOverride: ""
hostAliases: []
commonLabels: {}
commonAnnotations: {}
clusterDomain: cluster.local
extraDeploy: []

## @section Keycloak parameters

image:
  registry: docker.io
  repository: bitnami/keycloak
  tag: 15.1.0-debian-10-r0
  pullPolicy: IfNotPresent
  pullSecrets: []
  debug: false

auth:
  createAdminUser: true
  adminUser: admin-user
  adminPassword: "admin-password"
  managementUser: manager
  managementPassword: "manager-password"
  existingSecret: ""
  existingSecretPerPassword: {}
  tls:
    enabled: true
    autoGenerated: true
    existingSecret: ""
    truststoreFilename: ""
    keystoreFilename: ""
    jksSecret: ""
    keystorePassword: ""
    truststorePassword: ""
    resources:
      limits: {}
      requests:
        cpu: 100m
        memory: 128Mi

proxyAddressForwarding: true
serviceDiscovery:
  enabled: true
  protocol: kubernetes.KUBE_PING
  properties: []
  transportStack: tcp

cache:
  ownersCount: 3
  authOwnersCount: 3
configuration: ""
existingConfigmap: ""
extraStartupArgs: ""
initdbScripts: {}
initdbScriptsConfigMap: ""
command: []
args: []
extraEnvVars: []
extraEnvVarsCM: ""
extraEnvVarsSecret: ""

## @section keycloak-config-cli parameters

keycloakConfigCli:
  enabled: false
  image:
    registry: docker.io
    repository: bitnami/keycloak-config-cli
    tag: 4.4.0-debian-10-r4
    pullPolicy: IfNotPresent
    pullSecrets: []
  annotations:
    helm.sh/hook: "post-install,post-upgrade,post-rollback"
    helm.sh/hook-delete-policy: "hook-succeeded,before-hook-creation"
    helm.sh/hook-weight: "5"
  command: []
  args: []
  hostAliases: []
  resources:
    limits: {}
    requests: {}
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    runAsNonRoot: true
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  backoffLimit: 1
  podLabels: {}
  podAnnotations: {}
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraVolumes: []
  extraVolumeMounts: []
  configuration: {}
  existingConfigmap: ""

## @section Keycloak deployment/statefulset parameters

replicaCount: 3
containerPorts:
  http: 8080
  https: 8443
podSecurityContext:
  enabled: true
  fsGroup: 1001
containerSecurityContext:
  enabled: true
  runAsUser: 1001
  runAsNonRoot: true
resources:
  limits: {}
  requests:
    cpu: 100m
    memory: 10Mi

startupProbe:
  enabled: false
  httpGet:
    path: /auth/
    port: http
  initialDelaySeconds: 30
  periodSeconds: 5
  timeoutSeconds: 1
  failureThreshold: 60
  successThreshold: 1
livenessProbe:
  enabled: true
  httpGet:
    path: /auth/
    port: http
  initialDelaySeconds: 300
  periodSeconds: 1
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1
readinessProbe:
  enabled: true
  httpGet:
    path: /auth/realms/master
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 1
  failureThreshold: 3
  successThreshold: 1

customStartupProbe: {}
customLivenessProbe: {}
customReadinessProbe: {}

updateStrategy:
  type: RollingUpdate
podAffinityPreset: ""
podAntiAffinityPreset: soft
nodeAffinityPreset:
  type: ""
  key: ""
  values: []
affinity: {}
nodeSelector:
  my.provider.com/node-pool: web
tolerations: []
podLabels: {}
podAnnotations: {}
priorityClassName: ""
lifecycleHooks: {}
extraVolumes: []
extraVolumeMounts: []
initContainers: []
sidecars: []

## @section Exposure parameters

service:
  type: ClusterIP
  port: 80
  httpsPort: 443
  nodePorts:
    http: ""
    https: ""
  clusterIP: ""
  loadBalancerIP: ""
  loadBalancerSourceRanges: []
  externalTrafficPolicy: Cluster
  annotations: {}

ingress:
  enabled: true
  hostname: login.example.com
  apiVersion: ""
  ingressClassName: "nginx"
  path: /
  pathType: ImplementationSpecific
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-example"
    cert-manager.io/acme-challenge-type: http01
    nginx.ingress.kubernetes.io/proxy-buffer-size: 16k
  tls: true
  extraHosts: []
  extraTls: []
  secrets: []
  existingSecret: "example-login-tls"
  servicePort: http

networkPolicy:
  enabled: false
  allowExternal: true
  additionalRules: {}

serviceAccount:
  create: true
  name: ""
  automountServiceAccountToken: true

rbac:
  create: true
  rules: []

## @section Other parameters

pdb:
  create: false
  minAvailable: 1
  maxUnavailable: ""

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 11
  targetCPU: ""
  targetMemory: ""

## @section Metrics parameters

metrics:
  enabled: true
  service:
    port: 9990
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "{{ .Values.metrics.service.port }}"
  serviceMonitor:
    enabled: false
    namespace: ""
    interval: 30s
    scrapeTimeout: ""
    relabellings: []
    honorLabels: false
    additionalLabels: {}

## @section Database parameters

postgresql:
  enabled: false
  postgresqlUsername: bn_keycloak
  postgresqlPassword: ""
  postgresqlDatabase: bitnami_keycloak
  existingSecret: ""
  persistence:
    enabled: true

externalDatabase:
  host: "serviceName.namespace.svc"
  port: 5432
  user: example-login
  password: "password"
  database: example-login
  existingSecret: ""
